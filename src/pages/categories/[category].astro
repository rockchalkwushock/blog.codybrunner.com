---
import { getCollection } from 'astro:content'

import BaseLayout from '~/layouts/base-layout.astro'
import Article from '~/components/article.astro'
import Head from '~/components/head.astro'
import SimpleLayout from '~/components/simple-layout.astro'
import { filterArticles, hasCategory, isPublished } from '~/utils/helpers'
import type { Article as ArticleType, CategoryEnum } from '~/content/config'
import { toCapitalize } from '~/utils/strings'

export async function getStaticPaths() {
	let articles = await getCollection('articles', article => {
		if (import.meta.env.MODE === 'production') {
			return isPublished(article)
		}
		return true
	})

	const categories = [
		...new Set(
			articles
				.reverse()
				.map(article => {
					if (typeof article.data.categories === 'undefined') return undefined
					return article.data.categories
				})
				.flat()
				.filter(category => typeof category !== 'undefined')
				.sort()
		),
	]

	return categories.map(category => {
		return {
			params: { category },
			props: {
				articles: filterArticles(articles, article =>
					hasCategory(article, category as CategoryEnum)
				),
			},
		}
	})
}

export interface Props {
	readonly articles: ArticleType[]
}
const { category } = Astro.params
const { articles } = Astro.props

const METADATA = {
	description: `Articles about ${toCapitalize(category as string)}`,
	title: `${toCapitalize(category as string)}`,
}
---

<BaseLayout>
	<Head
		description={METADATA.description}
		slot='metadata'
		title={METADATA.title}
	/>
	<SimpleLayout
		intro={`Articles in the category of ${category}.`}
		slot='content'
		title={`Category: ${toCapitalize(category as string)}`}
	>
		<div
			class='md:border-l md:border-primary-100 md:pl-6 md:dark:border-primary-700/40'
		>
			<div class='flex max-w-3xl flex-col space-y-16'>
				{
					articles.map(({ data: article, slug }) => (
						<Article article={article} slug={slug} />
					))
				}
			</div>
		</div>
	</SimpleLayout>
</BaseLayout>
