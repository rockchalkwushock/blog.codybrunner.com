---
import { getCollection } from 'astro:content'
import type { Post } from 'content/config'
import Icon from 'astro-icon'
import { twMerge } from 'tailwind-merge'

import BaseLayout from './BaseLayout.astro'
import CategoryLink from '@components/CategoryLink.astro'
import FormattedDate from '@components/FormattedDate.astro'
import Head from '@components/Head.astro'
import Link from '@components/Link.astro'
import List from '@components/List.astro'
import ListItem from '@components/ListItem.astro'
import Main from '@components/Main.astro'
import Section from '@components/Section.astro'
import TagLink from '@components/TagLink.astro'
import {
	filterPosts,
	getRelatedPosts,
	isAfter,
	isPublished,
	sortPosts,
} from '@utils/post'
import SubTitle from '@components/SubTitle.astro'

export interface Props {
	next: Post | undefined
	post: Post
	prev: Post | undefined
}

const {
	next,
	post: { data: post, render, slug },
	prev,
} = Astro.props
const { Content, remarkPluginFrontmatter } = await render()

let posts = await getCollection('posts')

if (import.meta.env.MODE === 'production') {
	posts = sortPosts(filterPosts(posts, isPublished), isAfter)
} else {
	posts = sortPosts(posts, isAfter)
}

const relatedPosts = getRelatedPosts(
	{
		data: post,
		slug,
	},
	posts,
	5
)
---

<BaseLayout>
	<Head
		description={post.description}
		image={post.heroImage}
		slot='metadata'
		title={post.title}
	/>
	<Main class='space-y-8' slot='content'>
		<header
			class={twMerge(
				'relative isolate h-96 overflow-hidden rounded-t-xl bg-gray-900',
				post.draft ? 'border-8 border-solid border-red-500' : undefined
			)}
		>
			{
				post.heroImage && (
					<img
						alt={post.heroImage.alt}
						class='absolute inset-0 -z-10 h-full w-full rounded-t-xl object-cover'
						src={post.heroImage.src}
					/>
				)
			}
			<div
				class='absolute inset-x-0 top-[-10rem] -z-10 transform-gpu overflow-hidden blur-3xl sm:top-[-20rem]'
			>
				<svg
					class='relative left-[calc(50%-11rem)] -z-10 h-[21.1875rem] max-w-none -translate-x-1/2 rotate-[30deg] sm:left-[calc(50%-30rem)] sm:h-[42.375rem]'
					viewBox='0 0 1155 678'
				>
					<path
						fill='url(#45de2b6b-92d5-4d68-a6a0-9b9b2abad533)'
						fill-opacity='.2'
						d='M317.219 518.975L203.852 678 0 438.341l317.219 80.634 204.172-286.402c1.307 132.337 45.083 346.658 209.733 145.248C936.936 126.058 882.053-94.234 1031.02 41.331c119.18 108.451 130.68 295.337 121.53 375.223L855 299l21.173 362.054-558.954-142.079z'
					></path>
					<defs>
						<linearGradient
							id='45de2b6b-92d5-4d68-a6a0-9b9b2abad533'
							x1='1155.49'
							x2='-78.208'
							y1='.177'
							y2='474.645'
							gradientUnits='userSpaceOnUse'
						>
							<stop stop-color='#9089FC'></stop>
							<stop offset={1} stop-color='#FF80B5'></stop>
						</linearGradient>
					</defs>
				</svg>
			</div>
			<div class='absolute inset-0 flex flex-col items-center justify-center'>
				{
					post.draft ? (
						<div class='flex items-center space-x-2'>
							<span class='rounded-3xl border border-transparent bg-red-500 py-1 px-1.5 font-bold uppercase text-white'>
								Draft
							</span>
						</div>
					) : (
						<div class='flex h-full w-full flex-col items-center space-y-2 px-6'>
							<div class='flex flex-1 items-center justify-center'>
								<h1
									class={twMerge(
										'text-center text-3xl font-semibold text-aura-white lg:text-4xl',
										post.heroImage ? 'rounded-lg bg-aura-black p-2 ' : undefined
									)}
								>
									{post.title}
								</h1>
							</div>
							<div class='flex w-full justify-between pb-6 text-aura-white'>
								<div
									class={twMerge(
										'flex flex-col sm:flex-row items-center justify-center sm:space-x-2 sm:justify-start',
										post.heroImage ? 'rounded-lg bg-aura-black px-2' : undefined
									)}
								>
									<span>{post.author}</span>
									<span class='hidden sm:block'>/</span>
									<FormattedDate
										date={post.updatedAt || post.publishedAt || post.createdAt}
									/>
								</div>
								<div
									class={twMerge(
										'flex flex-col sm:flex-row items-center justify-center sm:space-x-2 sm:justify-end',
										post.heroImage ? 'rounded-lg bg-aura-black px-2' : undefined
									)}
								>
									<span>{remarkPluginFrontmatter.readingTime}</span>
									<span class='hidden sm:block'>/</span>
									<div class='flex items-center space-x-2'>
										<Icon class='h-5 w-5' name='mdi:eye-outline' />
										<span>10.000</span>
									</div>
								</div>
							</div>
						</div>
					)
				}
			</div>
		</header>
		<Section class='items-center space-y-4'>
			<div class='flex w-full items-center justify-between'>
				{
					post.categories && (
						<List
							class={twMerge(
								'grid items-center gap-3',
								post.categories.length >= 4
									? 'grid-cols-4'
									: post.categories.length >= 3
									? 'grid-cols-3'
									: post.categories.length >= 2
									? 'grid-cols-2'
									: 'grid-cols-1'
							)}
							kind='unordered'
						>
							{post.categories.map(category => (
								<ListItem class='rounded-full bg-aura-green/50 px-3 py-0.5 text-base font-semibold lg:hover:bg-aura-purple-fading/50'>
									<CategoryLink category={category}>{category}</CategoryLink>
								</ListItem>
							))}
						</List>
					)
				}
				{
					post.tags && (
						<List
							class={twMerge(
								'grid grid-cols-2 items-center gap-3',
								post.tags.length >= 4
									? 'sm:grid-cols-4'
									: post.tags.length >= 3
									? 'sm:grid-cols-3'
									: post.tags.length >= 2
									? 'sm:grid-cols-2'
									: 'sm:grid-cols-1'
							)}
							kind='unordered'
						>
							{post.tags.map(tag => (
								<ListItem class='flex items-center justify-center rounded-full bg-aura-blue/50 px-3 py-0.5 text-base font-semibold lg:hover:bg-aura-purple-fading/50'>
									<TagLink tag={tag}>{tag}</TagLink>
								</ListItem>
							))}
						</List>
					)
				}
			</div>
		</Section>
		<article class='prose prose-lg prose-invert max-w-none'>
			<Content />
		</article>
		<Section
			class={twMerge(
				'flex-row items-center',
				next !== undefined && prev !== undefined
					? 'justify-between'
					: next !== undefined && prev === undefined
					? 'justify-end'
					: 'justify-start'
			)}
		>
			{
				prev && (
					<Link
						class='rounded-lg bg-aura-purple py-2 px-4 font-bold'
						href={`/${prev.slug}`}
					>
						<Icon name='mdi:arrow-left-bold-circle' class='h-10 w-10' />
					</Link>
				)
			}
			{
				next && (
					<Link
						class='rounded-lg bg-aura-purple py-2 px-4 font-bold'
						href={`/${next.slug}`}
					>
						<Icon name='mdi:arrow-right-bold-circle' class='h-10 w-10' />
					</Link>
				)
			}
		</Section>
		{
			relatedPosts && relatedPosts.length > 0 && (
				<Section>
					<SubTitle class='mb-4' heading='h2'>
						Related Posts
					</SubTitle>
					<List class='space-y-4' kind='unordered'>
						{relatedPosts.map(post => (
							<ListItem class='flex rounded-lg bg-gradient-to-r from-aura-blue via-aura-purple to-aura-orange p-0.5'>
								<div class='flex flex-1 flex-col space-y-2 rounded-lg bg-aura-black p-4'>
									<SubTitle heading='h4'>
										<Link class='!text-aura-white/80' href={`/${post.slug}`}>
											{post.data.title}
										</Link>
									</SubTitle>
									<FormattedDate
										class='!text-aura-gray'
										date={post.data.publishedAt ?? post.data.createdAt}
									/>
								</div>
							</ListItem>
						))}
					</List>
				</Section>
			)
		}
	</Main>
</BaseLayout>
